# swagger.yml

# specify which version of openapi you use
#  just like each new Python version includes new features, there may be keywords added or
#  deprecated in the OpenAPI specification.
openapi: 3.0.0

# set up basic info of your api
info:
  title: "RP Flask REST API" #  Title included in the Connexion-generated UI system
  description: "An API about people and notes" # Description of what the API provides or is about
  version: "1.0.0" # Version value for the API

# By providing "/api" as the value of url, you’ll be able to access all of your API paths relative
#  to http://localhost:8000/api.
servers:
  - url: "/api"

components:
  schemas:
    Person: # define the schema of Person
      type: "object" # the data type o the schema
      required: # the required properties, The dash(-) in front indicates that required can contain a list of properties
        - lname
      properties: # Any required property must also exist in properties
        fname:
          type: "string"
        lname:
          type: "string"
  parameters:
    lname:
      name: "lname"
      description: "Last name of the person to get"
      in: path
      required: True
      schema:
        type: "string"

# define your API endpoints in a paths block:
# Below config creates the GET /api/people URL endpoint that you can access at http://localhost:8000/api/people.
paths:
  /people: # The relative URL of your API endpoint
    get: # The HTTP method that this URL endpoint will respond to
      operationId: "people.read_all" # The Python function that’ll respond to the request
      tags: # The tags assigned to this endpoint, which allow you to group the operations in the UI
        - "People"
      summary: "Read the list of people" # The UI display text for this endpoint
      responses: # The status codes that the endpoint responds with
        "200":
          description: "Successfully read people list"
    post: # post endpoint will add a new person
      operationId: "people.create"
      tags:
        - People
      summary: "Create a person"
      # requestBody is the payload information that user send to server to create Person
      requestBody:
        description: "Person to create"
        required: True
        content:
          application/json: # the data exchange format of your API.
            schema:
              x-body-name: "person"
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: "Successfully created person"

  /people/{lname}: # create a new path /people/{lname} path
    get:
      operationId: "people.read_one"
      tags:
        - People
      summary: "Read one person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "Successfully read person"

    put:
      tags:
        - People
      operationId: "people.update"
      summary: "Update a person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "Successfully updated person"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "person"
              $ref: "#/components/schemas/Person"

    delete:
      tags:
        - People
      operationId: "people.delete"
      summary: "Delete a person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "204":
          description: "Successfully deleted person"
